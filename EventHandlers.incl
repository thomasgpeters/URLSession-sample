void local fn MyCustomCellCallback( tag as long, identifier as CFStringRef, row as NSInteger, vw as CFTypeRef, userData as ptr )'~'1CFDictionaryRef dict = fn ArrayObjectAtIndex( fn TableViewData( tag ), row )select ( fn ViewTag( vw ) )case _tableCheckboxButtonSetState( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )case _tablePopUpPopUpButtonSelectItemAtIndex( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )case _tableRatingControlSetIntegerValue( vw, fn NumberIntegerValue( fn DictionaryObjectForKey( dict, identifier ) ) )end selectend fnvoid local fn SayHello'~'1textlabel _textLabel, fn StringWithFormat(@"Hello, %@",fn NSUserName)end fnvoid local fn ToggleSecurity'~'1if (isSecurityOn)ButtonSetImage( _securityToggleBtn, toggleOff )elseButtonSetImage( _securityToggleBtn, toggleOn )end ifisSecurityOn = not isSecurityOnend fnvoid local fn DoToolbar( tag as long )ToolbarItemSetBordered( _mainToolbar, _createProjectToolbarBtn, (tag == _createProjectToolbarBtn ) )ToolbarItemSetBordered( _mainToolbar, _createObjectToolbarBtn, (tag == _createObjectToolbarBtn ) )ToolbarItemSetBordered( _mainToolbar, _generateXibFilesToolbarBtn, (tag == _generateXibFilesToolbarBtn ) )end fnvoid local fn ShowdProjectCreateViewViewSetHidden( _welcomeView, YES )ViewSetHidden( _projectCreateView, NO )ViewSetHidden( _objectCreateView, YES )ViewSetAcceptsFirstResponder( _projectCreateView, YES )end fnvoid local fn ShowWelcomeViewViewSetHidden( _welcomeView, NO )ViewSetHidden( _projectCreateView, YES )ViewSetHidden( _objectCreateView, YES )ViewSetAcceptsFirstResponder( _welcomeView, YES )end fnvoid local fn ShowObjectCreateViewViewSetHidden( _welcomeView, YES )ViewSetHidden( _projectCreateView, YES )ViewSetHidden( _objectCreateView, NO )ViewSetAcceptsFirstResponder( _welcomeView, YES )end fn// application events arrive herevoid local fn DoAppEvent( ev as long )'~'1select ( ev )case _appWillFinishLaunching// app is about to finish launching - build menu and windowfn URLSessionAuthAPI(@"/api/authentication-User/login")// appServiceUser = @"u1"// appServicePasswd  = @"p"case _appShouldTerminateAfterLastWindowClosedAppEventSetBool( YES )// tell the runtime we can quitend selectend fn// menu events arrive herevoid local fn DoMenu( menuID as long, itemID as long )'~'1select ( menuID )case _mHelloselect ( itemID )case _iSayHello : fn SayHelloend selectend selectend fn// window and control events arrive herevoid local fn DoDialog( ev as long, tag as long )'~'1CFStringRef            identifier ' the Object IdentifierCFMutableDictionaryRef resultsDictionaryRefselect ( ev )case _btnClickselect ( tag )case _pushBtn     						: fn SayHellocase _createProjectBtn				: fn ShowdProjectCreateViewcase _createProjectCancelBtn	: fn ShowWelcomeViewcase _myButton							: fn GetAPIContent(@"/api/Customer/ALFKI/")case _createProjectCreateBtn	: fn InitProjectcase _xibButton							: fn OpenXibFilecase _loginButton						: fn URLSessionAuthAPI(@"/api/authentication-User/login")case _securityToggleBtn			: fn ToggleSecurityend selectcase _tableViewSelectionDidChangeSegmentedControlSetSegmentEnabled( _addRemoveSegment, _removeObjectSegmentItem, ( fn TableViewSelectedRow( tag ) != -1 ))select ( tag )case _objectListViewidentifier = fn DictionaryObjectForKey( fn ArrayObjectAtIndex( fn TableViewData( _objectListView ), fn TableViewSelectedRow( _objectListView )), @"ID" )resultsDictionaryRef = fn GetObjectByObjectNameRecord( identifier )fn PopulateObjectView( resultsDictionaryRef )end selectcase _textFieldDidChangeselect ( tag )case _projectNameEdit	: fn ValidateRequiredValuescase _baseURLEdit 			: fn ValidateRequiredValuescase _authNameEdit		 	: fn ValidateRequiredValuescase _authPasswordEdit	: fn ValidateRequiredValuesend selectcase _toolbarItemClickselect case ( tag )case _createProjectToolbarBtn      : fn DoToolbar( _createProjectToolbarBtn )case _createObjectToolbarBtn			 : fn DoToolbar( _createObjectToolbarBtn )case _generateXibFilesToolbarBtn   : fn DoToolbar( _generateXibFilesToolbarBtn )case _settingsToolbarBtn					 : fn DoToolbar( _settingsToolbarBtn )end selectcase _windowWillClose : 'endend selectend fn